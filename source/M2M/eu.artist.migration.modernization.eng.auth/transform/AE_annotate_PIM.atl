-- @atlcompiler emftvm
-- @nsURI uml=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI profile=http://www.eclipse.org/uml2/4.0.0/UML


module AE_annotate_PIM;
create OUT: uml from IN: uml, AE: profile, JAAS: profile;

uses "lib::UMLLib";
uses "lib::JAAS2AEMapping";

---VARIABLES

helper def: authprofile: uml!Profile =
	profile!Profile.allInstancesFrom('AE').asSequence().first();

helper def: ae_stereotypes: Set(profile!Stereotype) =
	profile!Stereotype.allInstancesFrom('AE') -> asSet();

helper def: aeStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'AuthenticationEnforcer').
			asSequence().first();

helper def: apStereotype: profile!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'AuthenticationProvider').
			asSequence().first();

helper def: sstoreStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'SubjectStore').asSequence().first();

helper def: subjStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'Subject').asSequence().first();

helper def: clientStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'Client').asSequence().first();

helper def: credentialsStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'Credentials').asSequence().first();

helper def: reqContextStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> select(e | e.name = 'RequestContext').asSequence().
			first();

helper def: op_authStereotype: uml!Stereotype =
	thisModule.ae_stereotypes -> any(e | e.name = 'op_authenticate');

helper def: op_verify: uml!Stereotype =
	thisModule.ae_stereotypes -> any(e | e.name = 'op_verify');

helper def: op_rsubj: uml!Stereotype =
	thisModule.ae_stereotypes -> any(e | e.name = 'op_rertieve_subject');

helper def: op_getCredentials: uml!Stereotype =
	thisModule.ae_stereotypes -> any(e | e.name = 'op_getCredentials');

helper def: p_id: uml!Stereotype =
	thisModule.ae_stereotypes -> any(e | e.name = 'p_identifier');

---HELPERS


---RULES
rule Model {
	from
		s: uml!Model in IN (
			s.oclIsTypeOf(uml!Model) and not s.belongsToSourceRef()
		)
	to
		t: uml!Model (
			name <- s.name,
			visibility <- s.visibility,
			viewpoint <- s.viewpoint,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			packageMerge <- s.packageMerge,
			packagedElement <- s.packagedElement
		)
	do {
		--- We apply other profiles except JAAS
		for (prof in s.getAllAppliedProfiles()){
			if(not (prof.name = 'JAAS_Profile'))
				t.applyProfile(prof);
		} --- We apply the auth profile
		
		t.applyProfile(thisModule.authprofile); 
	}
}

rule Package {
	from
		s: uml!Package in IN (
			s.oclIsTypeOf(uml!Package) and not s.belongsToSourceRef()
		)
	to
		t: uml!Package mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			packageMerge <- s.packageMerge,
			packagedElement <- s.packagedElement,
			profileApplication <- s.profileApplication
		) --    do {
--		--- We apply other profiles except JAAS
--		for (prof in s.getAllAppliedProfiles()){
--			if(not (prof.name = 'JAAS'))
--				t.applyProfile(prof);
--		} 
--		
--		--- We apply the auth profile 
----		SHOULD NOT BE NECESSARY
----		t.applyProfile(thisModule.authprofile); 
--	}
	
}

rule Association {
	from
		s: uml!Association in IN (
			s.oclIsTypeOf(uml!Association) and not s.belongsToSourceRef()
		)
	to
		t: uml!Association mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			templateParameter <- s.templateParameter,
			supplier <- s.supplier,
			client <- s.client,
			endType <- s.endType,
			isDerived <- s.isDerived,
			collaborationUse <- s.collaborationUse,
			ownedEnd <- s.ownedEnd,
			memberEnd <- s.memberEnd
		)
}

rule ElementImport {
	from
		s: uml!ElementImport in IN (
			s.oclIsTypeOf(uml!ElementImport) and not s.belongsToSourceRef()
		)
	to
		t: uml!ElementImport mapsTo s (
			visibility <- s.visibility,
			alias <- s.alias,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			importedElement <- s.importedElement
		)
}

rule PackageImport {
	from
		s: uml!PackageImport in IN (
			s.oclIsTypeOf(uml!PackageImport) and not s.belongsToSourceRef()
		)
	to
		t: uml!PackageImport mapsTo s (
			visibility <- s.visibility,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			importedPackage <- s.importedPackage
		)
}

rule Generalization {
	from
		s: uml!Generalization in IN (
			s.oclIsTypeOf(uml!Generalization) and not s.belongsToSourceRef()
		)
	to
		t: uml!Generalization mapsTo s (
			isSubstitutable <- s.isSubstitutable,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			general <- s.general,
			generalizationSet <- s.generalizationSet
		)
}

rule Property {
	from
		s: uml!Property in IN (
			s.oclIsTypeOf(uml!Property) and not s.belongsToSourceRef()
		)
	to
		t: uml!Property mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			isLeaf <- s.isLeaf,
			isStatic <- s.isStatic,
			isOrdered <- s.isOrdered,
			isUnique <- s.isUnique,
			isReadOnly <- s.isReadOnly,
			isDerived <- s.isDerived,
			isDerivedUnion <- s.isDerivedUnion,
			aggregation <- s.aggregation,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			type <- s.type,
			upperValue <- s.upperValue,
			lowerValue <- s.lowerValue,
			templateParameter <- s.templateParameter,
			deployment <- s.deployment,
			redefinedProperty <- s.redefinedProperty,
			defaultValue <- s.defaultValue,
			subsettedProperty <- s.subsettedProperty,
			association <- s.association,
			qualifier <- s.qualifier
		)
}

rule Parameter {
	from
		s: uml!Parameter in IN (
			s.oclIsTypeOf(uml!Parameter) and not s.belongsToSourceRef()
		)
	to
		t: uml!Parameter mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			isOrdered <- s.isOrdered,
			isUnique <- s.isUnique,
			direction <- s.direction,
			isException <- s.isException,
			isStream <- s.isStream,
			effect <- s.effect,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			type <- s.type,
			templateParameter <- s.templateParameter,
			upperValue <- s.upperValue,
			lowerValue <- s.lowerValue,
			parameterSet <- s.parameterSet,
			defaultValue <- s.defaultValue
		)
}

rule Operation {
	from
		s: uml!Operation in IN (
			s.oclIsTypeOf(uml!Operation) and not s.belongsToSourceRef()
		)
	to
		t: uml!Operation mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			isLeaf <- s.isLeaf,
			isStatic <- s.isStatic,
			isAbstract <- s.isAbstract,
			concurrency <- s.concurrency,
			isQuery <- s.isQuery,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			ownedParameter <- s.ownedParameter,
			method <- s.method,
			raisedException <- s.raisedException,
			ownedParameterSet <- s.ownedParameterSet,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			precondition <- s.precondition,
			postcondition <- s.postcondition,
			redefinedOperation <- s.redefinedOperation,
			bodyCondition <- s.bodyCondition
		)
}

rule Interface {
	from
		s: uml!Interface in IN (
			s.oclIsTypeOf(uml!Interface) and not s.belongsToSourceRef()
		)
	to
		t: uml!Interface mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			isLeaf <- s.isLeaf,
			isAbstract <- s.isAbstract,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			generalization <- s.generalization,
			powertypeExtent <- s.powertypeExtent,
			redefinedClassifier <- s.redefinedClassifier,
			substitution <- s.substitution,
			representation <- s.representation,
			collaborationUse <- s.collaborationUse,
			ownedUseCase <- s.ownedUseCase,
			useCase <- s.useCase,
			ownedAttribute <- s.ownedAttribute,
			ownedOperation <- s.ownedOperation,
			nestedClassifier <- s.nestedClassifier,
			redefinedInterface <- s.redefinedInterface,
			ownedReception <- s.ownedReception,
			protocol <- s.protocol
		)
}

rule Extension {
	from
		s: uml!Extension in IN (
			s.oclIsTypeOf(uml!Extension) and not s.belongsToSourceRef()
		)
	to
		t: uml!Extension mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			isLeaf <- s.isLeaf,
			isAbstract <- s.isAbstract,
			isDerived <- s.isDerived,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			generalization <- s.generalization,
			powertypeExtent <- s.powertypeExtent,
			redefinedClassifier <- s.redefinedClassifier,
			substitution <- s.substitution,
			representation <- s.representation,
			collaborationUse <- s.collaborationUse,
			ownedUseCase <- s.ownedUseCase,
			useCase <- s.useCase,
			ownedEnd <- s.ownedEnd,
			memberEnd <- s.memberEnd,
			navigableOwnedEnd <- s.navigableOwnedEnd
		)
}

rule ExtensionEnd {
	from
		s: uml!ExtensionEnd in IN (
			s.oclIsTypeOf(uml!ExtensionEnd) and not s.belongsToSourceRef()
		)
	to
		t: uml!ExtensionEnd mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			isLeaf <- s.isLeaf,
			isStatic <- s.isStatic,
			isOrdered <- s.isOrdered,
			isUnique <- s.isUnique,
			isReadOnly <- s.isReadOnly,
			isDerived <- s.isDerived,
			isDerivedUnion <- s.isDerivedUnion,
			aggregation <- s.aggregation,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			type <- s.type,
			upperValue <- s.upperValue,
			lowerValue <- s.lowerValue,
			templateParameter <- s.templateParameter,
			end <- s.end,
			deployment <- s.deployment,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			redefinedProperty <- s.redefinedProperty,
			defaultValue <- s.defaultValue,
			subsettedProperty <- s.subsettedProperty,
			association <- s.association,
			qualifier <- s.qualifier
		)
}

rule InterfaceRealization {
	from
		s: uml!InterfaceRealization in IN (
			s.oclIsTypeOf(uml!InterfaceRealization) and not s.belongsToSourceRef()
		)
	to
		t: uml!InterfaceRealization mapsTo s (
			name <- s.name,
			visibility <- s.visibility,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			templateParameter <- s.templateParameter,
			supplier <- s.supplier,
			client <- s.client,
			mapping <- s.mapping,
			contract <- s.contract
		)
}

rule Datatype {
	from 
		s: uml!DataType in IN (
			s.oclIsKindOf(uml!DataType) and not s.belongsToSourceRef()
		)
	to t : uml!DataType (
		name <- s.name,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isAbstract <- s.isAbstract,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        templateParameter <- s.templateParameter,
        templateBinding <- s.templateBinding,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        generalization <- s.generalization,
        powertypeExtent <- s.powertypeExtent,
        redefinedClassifier <- s.redefinedClassifier,
        substitution <- s.substitution,
        representation <- s.representation,
        collaborationUse <- s.collaborationUse,
        ownedUseCase <- s.ownedUseCase,
        useCase <- s.useCase,
        ownedAttribute <- s.ownedAttribute,
        ownedOperation <- s.ownedOperation)
}

--- base class rules ---
rule Class {
	from
		s: uml!Class in IN (
			s.oclIsTypeOf(uml!Class) and not s.belongsToSourceRef()
		)
	to
		t: uml!Class (
			__xmiID__ <- s.__xmiID__,
			name <- s.name,
			visibility <- s.visibility,
			isLeaf <- s.isLeaf,
			isAbstract <- s.isAbstract,
			isActive <- s.isActive,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			generalization <- s.generalization,
			powertypeExtent <- s.powertypeExtent,
			redefinedClassifier <- s.redefinedClassifier,
			substitution <- s.substitution,
			representation <- s.representation,
			collaborationUse <- s.collaborationUse,
			ownedUseCase <- s.ownedUseCase,
			useCase <- s.useCase,
			ownedAttribute <- s.ownedAttribute,
			ownedConnector <- s.ownedConnector,
			ownedBehavior <- s.ownedBehavior,
			classifierBehavior <- s.classifierBehavior,
			interfaceRealization <- s.interfaceRealization,
			nestedClassifier <- s.nestedClassifier,
			ownedOperation <- s.ownedOperation,
			ownedReception <- s.ownedReception
		) 
	
}

--- Annotate the Client
rule ClientClass extends Class{ 
	from
		s: uml!Class in IN (
			not s.belongsToExternals() and s.isClient()
		)
	to
		t: uml!Class 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.clientStereotype); 
	}
}

--- Annotate the Enforcer
rule AEClass extends Class{ 
	from
		s: uml!Class in IN (
			not s.belongsToExternals() and s.isAE()
		)
	using {
		cr : uml!Class = thisModule.getCredentialsClass();	
	}
	to
		t: uml!Class (),
		p: uml!Property(
			name <- 'credentials',
			type <- cr),
		o:uml!Operation(
			name <- 'getCredentials'
			),
		rc: uml!Class (
			name <- 'RequestContext',
			visibility <- s.visibility,
			ownedAttribute <- Sequence{p},
			package <- s.package,
			ownedOperation <- Sequence{o}
			)
		
	do {
		--- We apply the stereotype
		o.setType(cr);
		rc.applyStereotype(thisModule.reqContextStereotype);
		o.applyStereotype(thisModule.op_getCredentials);
		t.applyStereotype(thisModule.aeStereotype);
		t.createOwnedAttribute('ap', thisModule.getAPClass(), 1, 1);
		t.createOwnedAttribute('rc', rc, 1, 1);
	}
}

--- Annotate the Enforcer
rule SSClass extends Class{ 
	from
		s: uml!Class in IN (
			not s.belongsToExternals() and s.isSStore()
		)
	to
		t: uml!Class 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.sstoreStereotype);
		
	}
}

--- Annotate the Enforcer
rule Subject extends Class{ 
	from
		s: uml!Class in IN (
			not s.belongsToExternals() and s.isJSubject()
		)
	to
		t: uml!Class 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.subjStereotype);
		
	}
}

--- Annotate the Enforcer
rule APClass extends Class{ 
	from
		s: uml!Class in IN (
			not s.belongsToExternals() and s.isAP()
		)
	to
		t: uml!Class  (
			
		)
		
	do {
		t.createOwnedAttribute('credentials', thisModule.getCredentialsClass(), 0, 1);
		--- We apply the stereotype
		t.applyStereotype(thisModule.apStereotype);
		
	}
}

--- Annotate the Enforcer
rule Credential extends Class{ 
	from
		s: uml!Class in IN (
			not s.belongsToExternals() and s.isCredentials()
		)
	to
		t: uml!Class ()
		
	do {
		
		--- We apply the stereotype
		t.applyStereotype(thisModule.credentialsStereotype);
		
		
	}
}


rule op_auth extends Operation{ 
	from
		s: uml!Operation in IN (
			not s.belongsToExternals() and s.isOAuth()
		)
	to
		t: uml!Operation 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.op_authStereotype);
		
	}
}

rule op_verify extends Operation{ 
	from
		s: uml!Operation in IN (
			not s.belongsToExternals() and s.isOVerify()
		)
	to
		t: uml!Operation 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.op_verify);
		
	}
}

rule op_rsubj extends Operation{ 
	from
		s: uml!Operation in IN (
			not s.belongsToExternals() and s.isOGetSubject()
		)
	to
		t: uml!Operation 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.op_rsubj);
		
	}
}

rule op_p_id extends Property { 
	from
		s: uml!Property in IN (
			not s.belongsToExternals() and s.isPId()
		)
	to
		t: uml!Property 
		
	do {
		--- We apply the stereotype
		t.applyStereotype(thisModule.p_id);
		
	}
}


---lazy rules
--endpoint rule ApplyAllValues() {
--	do {
--		for (element in thisModule.traces.defaultSourceElements
--				->collect(e|e.object)
--				->select(o|o.oclIsKindOf(uml!Class))) {
--			thisModule.aeValues(element);
--		}
--			
--	}
--}
--
--unique lazy rule createPropOfType {
--	from s : uml!Class
--	using
--	{ 
--		rc : uml!Class = uml!Class.allInstances() -> any(c | c.hasStereotype('RequestContext'));
--	}
--	do {
--		s.createOwnedAttribute('rc',rc , 0, 1);
--	}
--
--}