/*******************************************************************************
 * File generated from the petstore-app::org::agoncal::application::petstore::service::CustomerService uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 26. Juni 2014 10:57:28 MESZ
 *******************************************************************************/
package org.agoncal.application.petstore.service;

import static com.googlecode.objectify.ObjectifyService.ofy;

import java.util.List;
import org.agoncal.application.petstore.domain.Customer;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of CustomerService.
 * 
 * @author 
 */
/**
 * Service class of CustomerService entity.
 *
 * @author 
 */
public class CustomerService {
	/**
	 * Description of the method createCustomer.
	 * @param entityToCreate 
	 * @return 
	 */
	 public Customer createCustomer( Customer entityToCreate) {
		if (entityToCreate != null) {
			// TODO: Provide business logic if required
			// finally the entity is stored - synchronous approach
			ofy().save().entity(entityToCreate).now();
		} else {
	
			// TODO: Exception handling if the entity is null
		}
	
		return entityToCreate;
	  }
	
	/**
	  * Description of the method findCustomer.
	  * @param entityId 
	  * @return 
	  */
	  public Customer findCustomer( long entityId) {
		return ofy().load().type(Customer.class).filter("id", entityId).first().now();
	  }
	
	/**
	   * Description of the method findAllCustomer.
	   * @return 
	   */
	   public List<Customer> findAllCustomer() {
		return ofy().load().type(Customer.class).list();
	  }
	
	/**
	    * Description of the method updateCustomer.
	    * @param entityToUpdate 
	    * @return 
	    */
	    public Customer updateCustomer( Customer entityToUpdate) {
		if (entityToUpdate != null) {
			// TODO: Provide business logic if required
			// finally the entity is stored - synchronous approach
			ofy().save().entity(entityToUpdate).now();
		} else {
	
			// TODO: Exception handling if the entity is null
		}
	
		return entityToUpdate;
	  }
	
	/**
	     * Description of the method removeCustomer.
	     * @param entityToRemove 
	     */
	     public void removeCustomer( Customer entityToRemove) {
		if (entityToRemove != null) {
			// TODO: Provide business logic if required
			// finally the entity is stored - synchronous approach
			ofy().delete().type(Customer.class).id(entityToRemove.getId()).now();
		} else {
	
			// TODO: Exception handling if the entity is null
		}
	  }


}
